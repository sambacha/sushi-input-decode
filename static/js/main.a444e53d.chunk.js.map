{"version":3,"sources":["lib/utils.js","mm.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","exports","__esModule","analyseTxData","ethers_1","require","raw","knownInterfaces","args","funcFragment","found","_i","knownInterfaces_1","decodeFunctionData","ethers","utils","hexDataSlice","getFunction","error","parsedArgs","map","argCall","type","inputs","name","colors","Arg","arg","layer","functionIndent","className","BigNumber","isBigNumber","toString","JSON","stringify","style","marginLeft","marginTop","padding","borderRadius","backgroundColor","App","useState","data","setData","decodedData","setDecodedData","Interface","GnosisSafe","abi","ERC20","useEffect","src","metamask","alt","height","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a444e53d.chunk.js","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexports.__esModule = true;\nexports.analyseTxData = void 0;\nvar ethers_1 = require(\"ethers\");\n// Analyse transaction arguments, and recursively check if an argument is\n// an encoded function call\nvar analyseTxData = function (raw, knownInterfaces) {\n    var args;\n    var funcFragment;\n    var found = false;\n    for (var _i = 0, knownInterfaces_1 = knownInterfaces; _i < knownInterfaces_1.length; _i++) {\n        var i = knownInterfaces_1[_i];\n        // try to decode an encoded function call\n        try {\n            // decode arguments into array\n            args = i.decodeFunctionData(ethers_1.ethers.utils.hexDataSlice(raw, 0, 4), raw);\n            // get ethersjs function fragment (name and inputs types)\n            funcFragment = i.getFunction(ethers_1.ethers.utils.hexDataSlice(raw, 0, 4));\n            found = true;\n            break;\n        }\n        catch (error) {\n            // try another interface\n            continue;\n        }\n    }\n    if (!found) {\n        // not an encoded function call, return the argument\n        return { raw: raw };\n    }\n    // inject the type of each argument object into parsedArgs\n    var parsedArgs = args.map(function (argCall, i) {\n        return __assign(__assign({}, exports.analyseTxData(argCall, knownInterfaces)), { type: funcFragment.inputs[i].type, name: funcFragment.inputs[i].name });\n    });\n    return { funcFragment: funcFragment, parsedArgs: parsedArgs, raw: raw };\n};\nexports.analyseTxData = analyseTxData;\n","export default __webpack_public_path__ + \"static/media/mm.9c0e035f.png\";","import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport metamask from \"./mm.png\"\nimport \"./App.css\";\nimport { analyseTxData, ArgDecoded } from \"./lib/utils.js\";\nimport GnosisSafe from \"./abis/gnosis.json\";\nimport ERC20 from \"./abis/ERC20.json\";\n\nconst colors = [\"#d4ebc3\", \"#c3c3eb\", \"#e0c3eb\", \"#ebc3c3\"];\n\nfunction Arg({ arg, layer = 0 }: { arg: ArgDecoded; layer?: number }) {\n  const functionIndent = layer * 3 + \"em\";\n  return (\n    <div className=\"Arg\">\n      {layer > 0 && (\n        <div>\n          <span>\n            {arg.type} {arg.name}:{\" \"}\n          </span>\n          {ethers.BigNumber.isBigNumber(arg.raw) ? (\n            <span>{arg.raw.toString()},</span>\n          ) : (\n            <span>{JSON.stringify(arg.raw)},</span>\n          )}\n        </div>\n      )}\n      {arg.funcFragment && (\n        <div\n          style={{\n            marginLeft: functionIndent,\n            marginTop: \"1em\",\n            padding: \"0.8em\",\n            borderRadius: \"1em\",\n            backgroundColor: colors[layer % colors.length],\n          }}\n        >\n          {layer > 0 && <b>Found an encoded function call !</b>}\n          <div>\n            <b>{arg.funcFragment.name + \"(\"}</b>\n            {arg.parsedArgs &&\n              arg.parsedArgs.map((arg, i) => (\n                <ul key={i}>\n                  <li>\n                    <Arg arg={arg} layer={layer + 1} />\n                  </li>\n                </ul>\n              ))}\n          </div>\n          <b>{\")\"}</b>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  const [data, setData] = useState<string>(\n    \"0x6a7612020000000000000000000000004ba1a50aecba077acdf4625bf9adb3fe964eea170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008b67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000064f8dc5dd90000000000000000000000000532fb8f096decb82ace8b3f67f5c11aebe02c140000000000000000000000004421e2bde12fabbd4306642e8ec73a5d2d87d99a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000821706fbbe2f5021d28a9323e4e804ececb8b4c96f056746f8d50fb1610817ee100ae268c83a04238bc87ad19c1880f2a5f1055e3ee2fe86d5b2a5cbd2c3bfb8ae1b000000000000000000000000e6220257d157ec7b481290fd10d2037cf0e83ea5000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000\"\n  );\n  const [decodedData, setDecodedData] = useState<ArgDecoded>({\n    raw: \"loading...\",\n  });\n\n  const [knownInterfaces, ] = useState([\n    new ethers.utils.Interface(GnosisSafe.abi),\n    new ethers.utils.Interface(ERC20.abi),\n  ]);\n\n  useEffect(() => {\n    setDecodedData(analyseTxData(data, knownInterfaces));\n  }, [data, knownInterfaces]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Title\">\n        <h1>tx input data checker</h1>\n      </div>\n      <img  src={metamask} alt=\"Metamask example\" height=\"400\"></img>\n      <h2>Input data:</h2>\n      <textarea value={data} onChange={(e) => setData(e.target.value)} />\n      <Arg arg={decodedData} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}